/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. DungeonCompilador.jj */
/*@egen*//**
 * Compilador D&D - Vers\u00e3o Definitiva
 * Gram\u00e1tica completa com anota\u00e7\u00f5es do JJTree, recupera\u00e7\u00e3o de erros (modo p\u00e2nico),
 * verifica\u00e7\u00e3o de argumentos e n\u00f3s expl\u00edcitos para identificadores e literais.
 */

options {
  STATIC = false;
  LOOKAHEAD = 1;
               
                           
                 
}

PARSER_BEGIN(DungeonCompilador)
package source;
import recovery.*;
import view.Tela;
import java.io.*;

public class DungeonCompilador/*@bgen(jjtree)*/implements DungeonCompiladorTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTDungeonCompiladorState jjtree = new JJTDungeonCompiladorState();

/*@egen*/
  final static Tela window = new Tela();

  public static void main(String[] args) 
  {
    //Inicia a tela
		window.setVisible(true);
		
		window.getCompilar().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

	  		window.setVazioConsoleMsg();

				if((window.getTextArquivo().getText().equals(window.getCampoTexto())) != true)
        {
          window.setControleArquivo(false);
        }


        if(window.getControleArquivo() || window.getTextArquivo().getText().equals(" ") )
        {
					inicia();
		   	} else
				{
					if(window.getTextArquivo().getText().equals(""))
	        {
	          JOptionPane.showMessageDialog (null, "Arquivo vazio", "Arquivo", JOptionPane.WARNING_MESSAGE);
	        } else
          {
	          int resp = JOptionPane.showConfirmDialog(null, "Salvar altera\u00e7\u00f5es?");
            if(resp == 0)
            {
              //Salvar um novo arquivo se ele n existir
              if(window.getFile() == null)
              {
                window.salvarComo();
                inicia();
              }else //Se o arquivo ja existir salvar nele
              {
                window.salvar();
                inicia();
              }
            }
          }
				}
		  }
  	});
  }

  /**
  * Pula tokens at\u00e9 encontrar um da RecoverySet ou EOF.
  */
  private void skip(RecoverySet rs) {
      Token t = getToken(1);                       // olha o pr\u00f3ximo
      while (!rs.contains(t.kind) && t.kind != DungeonCompiladorConstants.EOF) {
        getNextToken();                          // descarta
        t = getToken(1);
      }
  }
}
PARSER_END(DungeonCompilador)


/* ================================================================== */
/* L\u00c9XICO (Tokens)                                                    */
/* ================================================================== */

SKIP : { " " | "\t" | "\r" | "\n" }

TOKEN :
{
      < INICIAPROG   : "campanha" >
  |   < ABREBLOCO    : "mesa" >
  |   < FECHABLOCO   : "e_eh_aqui" >
  |   < FIMINST      : "fim_de_turno" >

  |   < IF           : "rola_um_dado_ai" >
  |   < THEN         : "acerta" >
  |   < ELSE         : "erra" >
  |   < END          : "long_rest" >

  |   < WHILE        : "iniciativa" >
  |   < DO           : "sua_vez" >
  |   < UNTIL        : "vez_do_monstro" >

  |   < TIPOINT      : "forca" >
  |   < TIPOFLOAT    : "destreza" >
  |   < TIPOBOL      : "inteligencia" >
  |   < TIPOCHAR     : "sabedoria" >

  |   < ASSIGN       : "recebe" >
  |   < PLUS         : "buff" >  |   < MINUS  : "debuff" >
  |   < TIMES        : "crit" >  |   < DIV    : "partilha" >

  |   < EQ : "==" > | < NE : "!=" > | < GT : ">" > | < GE : ">=" >
  |   < LT : "<" >  | < LE : "<=" >

  |   < ANDBOOL : "&&" > | < ORBOOL : "||" > | < NOTBOOL : "!" >

  |   < INT_LIT   : (["0"-"9"])+ >
  |   < FLOAT_LIT : (["0"-"9"])+ "." (["0"-"9"])+ >
  |   < BOOL_LIT  : "verdadeiro" | "falso" >
  |   < CHAR_LIT  : "'" (~["'"])* "'" >

  |   <IDENT   : <LETTER> (<LETTER> | <DIGIT>)* >
  |   <#LETTER : ["a"-"z","A"-"Z","_"] >
  |   <#DIGIT  : ["0"-"9"] >
}

/* ================================================================== */
/* SINTAXE (Gram\u00e1tica com corre\u00e7\u00f5es na \u00e1rvore)                        */
/* ================================================================== */

SimpleNode programa()              : {/*@bgen(jjtree) #Programa( 1) */
  ASTPrograma jjtn000 = new ASTPrograma(JJTPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Programa( 1) */
  try {
/*@egen*/
  <INICIAPROG> <IDENT> <ABREBLOCO> bloco() <FECHABLOCO> <FIMINST> <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000,  1);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  1);
    }
  }
/*@egen*/
}

void bloco()        : {/*@bgen(jjtree) Bloco */
  ASTBloco jjtn000 = new ASTBloco(JJTBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Bloco */
  try {
/*@egen*/
  (
    try {
      declaracao() | comando()
    } 
    catch (ParseException e) {
      System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
      skip(Follow.bloco);
    }
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declaracao()             : {/*@bgen(jjtree) Declaracao */
  ASTDeclaracao jjtn000 = new ASTDeclaracao(JJTDECLARACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Declaracao */
        try {
/*@egen*/
	try {
    tipo() id() ( <ASSIGN> expressao() )? <FIMINST>
	} catch (ParseException e) {
    System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.declaracao);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void tipo()       : {/*@bgen(jjtree) Tipo */
  ASTTipo jjtn000 = new ASTTipo(JJTTIPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Tipo */
  try {
/*@egen*/
  try {
    <TIPOINT> | <TIPOFLOAT> | <TIPOBOL> | <TIPOCHAR>
	} catch (ParseException e) {
    System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.tipo);
	}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void comando()       : {}
{
  try {
    atribuicao()
    | condicional()
    | lacoWhile()
    | lacoDoUntil()
	} catch (ParseException e) {
    System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.comando);
	}
}

void atribuicao()             : {/*@bgen(jjtree) Atribuicao */
  ASTAtribuicao jjtn000 = new ASTAtribuicao(JJTATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Atribuicao */
        try {
/*@egen*/
	try {
    id() <ASSIGN> expressao() <FIMINST>
	} catch (ParseException e) {
    System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.atribuicao);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void condicional()              : {/*@bgen(jjtree) Condicional */
  ASTCondicional jjtn000 = new ASTCondicional(JJTCONDICIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Condicional */
        try {
/*@egen*/
	try {
    <IF> expressao() <THEN> bloco() ( <ELSE> bloco() )? <END>
	} catch (ParseException e) {
    System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.condicional);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void lacoWhile()        : {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) While */
        try {
/*@egen*/
	try {
    <WHILE> expressao() <DO> bloco() <END>
	} catch (ParseException e) {
    System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.lacoWhile);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void lacoDoUntil()          : {/*@bgen(jjtree) DoUntil */
  ASTDoUntil jjtn000 = new ASTDoUntil(JJTDOUNTIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DoUntil */
        try {
/*@egen*/
	try {
    <DO> bloco() <UNTIL> expressao() <FIMINST>
	} catch (ParseException e) {
    System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.lacoDoUntil);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/* --- Express\u00f5es --- */

void expressao()     : {/*@bgen(jjtree) Or */
  ASTOr jjtn000 = new ASTOr(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Or */
  try {
/*@egen*/
  try {
    expAND() ( <ORBOOL> expAND() )*
	} catch (ParseException e) {
    System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.expressao);
	}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void expAND()      : {/*@bgen(jjtree) And */
  ASTAnd jjtn000 = new ASTAnd(JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) And */
        try {
/*@egen*/
	try {
    expRel() ( <ANDBOOL> expRel() )*
	} catch (ParseException e) {
    System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.expAND);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void expRel()      : {/*@bgen(jjtree) Rel */
  ASTRel jjtn000 = new ASTRel(JJTREL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Rel */
        try {
/*@egen*/
	try {
    expAditiva() ( (<EQ>|<NE>|<GT>|<GE>|<LT>|<LE>) expAditiva() )?
	} catch (ParseException e) {
    System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.expRel);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void expAditiva()      : {/*@bgen(jjtree) Add */
  ASTAdd jjtn000 = new ASTAdd(JJTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Add */
        try {
/*@egen*/
	try {
    expMult() ( (<PLUS>|<MINUS>) expMult() )*
	} catch (ParseException e) {
    System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.expAditiva);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void expMult()       : {/*@bgen(jjtree) Mult */
  ASTMult jjtn000 = new ASTMult(JJTMULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Mult */
        try {
/*@egen*/
	try {
    fator() ( (<TIMES>|<DIV>) fator() )*
	} catch (ParseException e) {
    System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.expMult);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void fator()       : {} {
	try {
    id()
    | literal()
    | <NOTBOOL>/*@bgen(jjtree) Not */
                {
                  ASTNot jjtn001 = new ASTNot(JJTNOT);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/ fator()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
                }
/*@egen*/     
    | "(" expressao() ")"
	} catch (ParseException e) {
    System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.fator);
	}
}

void id()     : {/*@bgen(jjtree) Id */
  ASTId jjtn000 = new ASTId(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Id */
  try {
/*@egen*/
  <IDENT>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void literal()       : {} {/*@bgen(jjtree) IntLiteral */
      {
        ASTIntLiteral jjtn001 = new ASTIntLiteral(JJTINTLITERAL);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/
      <INT_LIT>/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
/*@egen*/            
    |/*@bgen(jjtree) FloatLiteral */
      {
        ASTFloatLiteral jjtn002 = new ASTFloatLiteral(JJTFLOATLITERAL);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ <FLOAT_LIT>/*@bgen(jjtree)*/
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
      }
/*@egen*/              
    |/*@bgen(jjtree) BoolLiteral */
      {
        ASTBoolLiteral jjtn003 = new ASTBoolLiteral(JJTBOOLLITERAL);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      }
      try {
/*@egen*/ <BOOL_LIT>/*@bgen(jjtree)*/
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
        }
      }
/*@egen*/             
    |/*@bgen(jjtree) CharLiteral */
      {
        ASTCharLiteral jjtn004 = new ASTCharLiteral(JJTCHARLITERAL);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
      }
      try {
/*@egen*/ <CHAR_LIT>/*@bgen(jjtree)*/
      } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004, true);
        }
      }
/*@egen*/             
}