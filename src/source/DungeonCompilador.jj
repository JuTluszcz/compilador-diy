/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(DungeonCompilador)
package source;

public class DungeonCompilador
{
  public static void main(String args []) throws ParseException
  {
    DungeonCompilador parser = new DungeonCompilador(System.in);
    while (true)
    {
      System.out.println("Iniciando uma nova historia");
      try
      {
        DungeonCompilador.main();
      }
      catch (ParseException e)
      {
        System.out.println("Voce falha no teste sintatico.");
        System.out.println(e.getMessage());
        DungeonCompilador.ReInit(System.in);
      }
      catch (TokenMgrError e)
      {
        System.out.println("Voce falha no teste lexico.");
        System.out.println(e.getMessage());
        DungeonCompilador.ReInit(System.in);
      }
    }
  }
}

PARSER_END(DungeonCompilador)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < INICIAPROG : "campanha" >
| < ABREBLOCO : "mesa" >
| < FECHABLOCO : "e_eh_aqui" >
| < FIMINSTRUCAO: "tpk" >
| < TIPOINT : "forca" >
| < TIPOBOL : "inteligencia" >
| < TIPOCHAR : "sabedoria" >
}


TOKEN : /* CONDITIONALS */
{
  < IF : "rola_um_dado_ai" >
| < ABREPAR : "(" >
| < FECHAPAR : ")" >
| < OPREL : "==" | "!=" | "<" | ">" | "<=" | ">=" >
| < OPBOOL : "&&" | "||" >
}

TOKEN : /* ASSIGNMENT */
{
  < ASSIGN : "=" >
}

TOKEN : /* LOOP */
{
  < WHILE : "iniciativa" >
| < DO : "sua_vez" >
| < DOWHILE : "vez_do_monstro" >
}

TOKEN : /* ARITHMETIC OPERATORS */
{
  < OPAD : "+" | "-" >
| < OPMULT : "*" | "/" >
}

TOKEN :
{
  < LETRA : ["a"-"z"] >
| < DIGITO : [ "0"-"9" ] >
| < IDENTIFICADOR : < LETRA >(< LETRA > | < DIGITO >)* >
}


void main() : {}
{
  < INICIAPROG > < IDENTIFICADOR > bloco()
}

void bloco() : {}
{
  <ABREBLOCO>
    (declaraVariavel() | condicional() | lacoWhile() | lacoDoWhile())*
  <FECHABLOCO>
}

void condicional() : {}
{
  <IF> <ABREPAR> expressao() <FECHAPAR> bloco()
}

void lacoWhile() : {}
{
  <WHILE> <ABREPAR> expressao() <FECHAPAR> bloco()
}

void lacoDoWhile() : {}
{
  <DO> bloco() <DOWHILE> <ABREPAR> expressao() <FECHAPAR>
}

void declaraVariavel() : {}
{
  tipoDado() listaDeclaracoes()
}

void listaDeclaracoes() : {}
{
  declaracao() ( "," declaracao() )*
}

void declaracao() : {}
{
  <IDENTIFICADOR> ( "=" expressao() )?
}

void expressao() : {}
{
  termo() ( <OPREL> termo() )?
}

void termo() : {}
{
  <IDENTIFICADOR> | ( <DIGITO> )+
}

void tipoDado() : {}
{
  (< TIPOINT > | < TIPOCHAR > | < TIPOBOL >)
}