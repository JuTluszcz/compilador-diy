/**
 * Compilador D&D – versão base
 * Requisitos mínimos: declaração, atribuição, if/else, while, do-until,
 * três tipos, dois laços, controle de erros em PT-BR.
 */

options {
  STATIC = true;
  LOOKAHEAD = 2;          // garante parsing LL(k) simples
}

PARSER_BEGIN(DungeonCompilador)
package source;

public class DungeonCompilador {
  public static void main(String[] args) {
    try {
      System.out.println("Iniciando uma nova historia!");
      DungeonCompilador p = new DungeonCompilador(System.in);
      p.programa();                     // 1 compilação
    } 
    catch (ParseException e)
    {
      System.out.println("Voce falha no teste sintatico.");
      System.out.println(e.getMessage());
    }
    catch (TokenMgrError e)
    {
      System.out.println("Voce falha no teste lexico.");
      System.out.println(e.getMessage());
    }
  }
}
PARSER_END(DungeonCompilador)

/* ------------------------------------------------------------------ */
/*  LÉXICO                                                             */
/* ------------------------------------------------------------------ */

SKIP : { " " | "\t" | "\r" | "\n" }

/* --- Palavras-chave & símbolos --- */
TOKEN :
{
      < INICIAPROG   : "campanha" >
  |   < ABREBLOCO    : "mesa" >
  |   < FECHABLOCO   : "e_eh_aqui" >
  |   < FIMINST      : "fim_de_turno" >

  |   < IF           : "rola_um_dado_ai" >
  |   < THEN         : "acerta" >
  |   < ELSE         : "erra" >
  |   < END          : "long_rest" >

  |   < WHILE        : "iniciativa" >
  |   < DO           : "sua_vez" >
  |   < UNTIL        : "vez_do_monstro" >

  /* tipos */
  |   < TIPOINT      : "forca" >
  |   < TIPOFLOAT    : "destreza" >
  |   < TIPOBOL      : "inteligencia" >
  |   < TIPOCHAR     : "sabedoria" >

  /* operadores */
  |   < ASSIGN       : "recebe" >
  |   < PLUS         : "buff" >  |   < MINUS  : "debuff" >
  |   < TIMES        : "crit" >  |   < DIV    : "partilha" >

  |   < EQ : "==" > | < NE : "!=" > | < GT : ">" > | < GE : ">=" >
  |   < LT : "<" >  | < LE : "<=" >

  |   < ANDBOOL : "&&" > | < ORBOOL : "||" > | < NOTBOOL : "!" >

  /* literais e identificadores */
  |   < INT_LIT   : (["0"-"9"])+ >
  |   < FLOAT_LIT : (["0"-"9"])+ "." (["0"-"9"])+ >
  |   < BOOL_LIT  : "verdadeiro" | "falso" >
  |   < CHAR_LIT  : "'" ~["'"] "'" >

  |   <IDENT   : <LETTER> (<LETTER> | <DIGIT>)* >
  |   <#LETTER : ["a"-"z","A"-"Z","_"] >
  |   <#DIGIT  : ["0"-"9"] >
}

/* ------------------------------------------------------------------ */
/*  SINTAXE (LL)                                                      */
/* ------------------------------------------------------------------ */

/* programa : campanha id mesa bloco e_eh_aqui fim_de_turno EOF */
void programa() :
{}
{
  <INICIAPROG> <IDENT> <ABREBLOCO>
      bloco()
  <FECHABLOCO> <FIMINST> 
  //<EOF>
}

/* bloco : {decl | cmd}* */
void bloco() :
{}
{
  ( declaraVariavel() | comando() )*
}

void declaraVariavel() : {}
 {
   tipo() listaDeclaracoes() <FIMINST>
 }
 
 void listaDeclaracoes() : {}
 {
   declaracao() ( "," declaracao() )*
 }

 void declaracao() : {}
 {
   <IDENT> ( <ASSIGN> expressao() )?
 }
 
/* tipo : forca | destreza | inteligencia | sabedoria */
void tipo() :
{}
{
  <TIPOINT> | <TIPOFLOAT> | <TIPOBOL> | <TIPOCHAR>
}

/* ---------------- COMANDOS ---------------- */
void comando() :
{}
{
    atribuicao()
  | condicional()
  | lacoWhile()
  | lacoDoUntil()
}

/* atrib : id = expr fim_de_turno */
void atribuicao() :
{}
{
  <IDENT> <ASSIGN> expressao() <FIMINST>
}

/* if : if (expr) entao bloco [se_nao bloco] fim */
void condicional() :
{}
{
  <IF> expressao() <THEN> bloco() ( <ELSE> bloco() )? <END>
}

/* while : iniciativa (expr) sua_vez bloco fim */
void lacoWhile() :
{}
{
  <WHILE> expressao() <DO> bloco() <END>
}

/* do-until : sua_vez bloco vez_do_monstro (expr) fim_de_turno   */
void lacoDoUntil() :
{}
{
  <DO> bloco() <UNTIL> expressao() <FIMINST>
}

/* ---------------- EXPRESSÕES ---------------- */

/* expr lógico OR */
void expressao() : {} { 
  expAND() ( <ORBOOL> expAND() )*
}

/* expr lógico AND */
void expAND() : {} {
  expRel() ( <ANDBOOL> expRel() )*
}

/* expr relacional */
void expRel() : {} {
  expAditiva() ( (<EQ>|<NE>|<GT>|<GE>|<LT>|<LE>) expAditiva() )?
}

/* + / - */
void expAditiva() : {} {
  expMult() ( (<PLUS>|<MINUS>) expMult() )*
}

/* * / */
void expMult() : {} {
  fator() ( (<TIMES>|<DIV>) fator() )*
}

/* fator */
void fator() : {} {
      <IDENT>
    | literal()
    | <NOTBOOL> fator()
    | "(" expressao() ")"
}

/* literais */
void literal() : {} {
      <INT_LIT>
    | <FLOAT_LIT>
    | <BOOL_LIT>
    | <CHAR_LIT>
}