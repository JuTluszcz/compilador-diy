/* DungeonCompiladorTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. DungeonCompiladorTokenManager.java */
package source;
import recovery.*;
import view.Tela;
import java.io.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.io.FileWriter;
import controleArquivo.CreateFile;
import java.io.FileWriter;
import javax.swing.JFileChooser;

/** Token Manager. */
@SuppressWarnings ("unused")
public class DungeonCompiladorTokenManager implements DungeonCompiladorConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 38;
            return 8;
         }
         if ((active0 & 0x1fe7ee0L) != 0L)
         {
            jjmatchedKind = 38;
            return 18;
         }
         if ((active0 & 0x10100L) != 0L)
         {
            jjmatchedKind = 38;
            return 12;
         }
         return -1;
      case 1:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
            return 7;
         }
         if ((active0 & 0x1ff7fe0L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
            return 18;
         }
         return -1;
      case 2:
         if ((active0 & 0x1ffffe0L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 2;
            return 18;
         }
         return -1;
      case 3:
         if ((active0 & 0x15ff7a0L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
            return 18;
         }
         if ((active0 & 0xa00840L) != 0L)
            return 18;
         return -1;
      case 4:
         if ((active0 & 0x10000L) != 0L)
            return 18;
         if ((active0 & 0x15ef7a0L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
            return 18;
         }
         return -1;
      case 5:
         if ((active0 & 0x500400L) != 0L)
            return 18;
         if ((active0 & 0x10ef3a0L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 5;
            return 18;
         }
         return -1;
      case 6:
         if ((active0 & 0x10eb3a0L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 6;
            return 18;
         }
         if ((active0 & 0x4000L) != 0L)
            return 18;
         return -1;
      case 7:
         if ((active0 & 0x1020020L) != 0L)
            return 18;
         if ((active0 & 0xcb380L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 7;
            return 18;
         }
         return -1;
      case 8:
         if ((active0 & 0x81080L) != 0L)
            return 18;
         if ((active0 & 0x4a300L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 8;
            return 18;
         }
         return -1;
      case 9:
         if ((active0 & 0x48300L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 9;
            return 18;
         }
         if ((active0 & 0x2000L) != 0L)
            return 18;
         return -1;
      case 10:
         if ((active0 & 0x48300L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 10;
            return 18;
         }
         return -1;
      case 11:
         if ((active0 & 0x40100L) != 0L)
            return 18;
         if ((active0 & 0x8200L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 11;
            return 18;
         }
         return -1;
      case 12:
         if ((active0 & 0x8200L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 12;
            return 18;
         }
         return -1;
      case 13:
         if ((active0 & 0x8000L) != 0L)
            return 18;
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 13;
            return 18;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 40:
         return jjStopAtPos(0, 41);
      case 41:
         return jjStopAtPos(0, 42);
      case 60:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 62:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x800020L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x420000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x880L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x10100L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x42000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x100200L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x84000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      default :
         return jjMoveNfa_0(9, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         break;
      case 61:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         break;
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1080020L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x528040L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x42000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x11200L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x800800L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x204000L);
      case 124:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x480000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x480L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x802000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x120L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x1010800L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x20040L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0xc100L);
      case 97:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 18);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 18);
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x12000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c0000L);
      case 102:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 18);
         break;
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 18);
         return jjMoveStringLiteralDfa4_0(active0, 0x1020000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x1280L);
      case 97:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 18);
         return jjMoveStringLiteralDfa5_0(active0, 0x20L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x88100L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1002000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 18);
         return jjMoveStringLiteralDfa6_0(active0, 0x2080L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 18);
         return jjMoveStringLiteralDfa6_0(active0, 0x24100L);
      case 102:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 18);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x88000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x8100L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000020L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 113:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 122:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 18);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      case 97:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 5, 18);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 18);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 24, 18);
         break;
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x82000L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x100L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 19, 18);
         break;
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L);
      case 105:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(8, 7, 18);
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 12, 18);
         break;
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x100L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(9, 13, 18);
         return jjMoveStringLiteralDfa10_0(active0, 0x200L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x100L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(11, 18, 18);
         break;
      case 111:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(11, 8, 18);
         return jjMoveStringLiteralDfa12_0(active0, 0x200L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa13_0(active0, 0x200L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x200L);
      case 111:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(13, 15, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 105:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(14, 9, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 24;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 8:
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAdd(18); }
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAdd(18); }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAdd(18); }
                  break;
               case 14:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 15:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 16:
                  if (curChar == 39 && kind > 37)
                     kind = 37;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAdd(20); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(21, 22); }
                  break;
               case 22:
                  if (curChar == 46)
                     { jjCheckNAdd(23); }
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(23); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     { jjCheckNAdd(18); }
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     { jjCheckNAdd(18); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     { jjCheckNAdd(18); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     { jjCheckNAdd(18); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 0:
                  if (curChar == 111 && kind > 36)
                     kind = 36;
                  break;
               case 1:
                  if (curChar == 114)
                     { jjCheckNAdd(0); }
                  break;
               case 2:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 10:
                  if (curChar == 115)
                     { jjCheckNAdd(0); }
                  break;
               case 11:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 15:
                  { jjAddStates(3, 4); }
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAdd(18); }
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAdd(18); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 15:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 24 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\143\141\155\160\141\156\150\141", 
"\155\145\163\141", "\145\137\145\150\137\141\161\165\151", 
"\146\151\155\137\144\145\137\164\165\162\156\157", "\162\157\154\141\137\165\155\137\144\141\144\157\137\141\151", 
"\141\143\145\162\164\141", "\145\162\162\141", "\154\157\156\147\137\162\145\163\164", 
"\151\156\151\143\151\141\164\151\166\141", "\163\165\141\137\166\145\172", 
"\166\145\172\137\144\157\137\155\157\156\163\164\162\157", "\146\157\162\143\141", "\144\145\163\164\162\145\172\141", 
"\151\156\164\145\154\151\147\145\156\143\151\141", "\163\141\142\145\144\157\162\151\141", "\162\145\143\145\142\145", 
"\142\165\146\146", "\144\145\142\165\146\146", "\143\162\151\164", 
"\160\141\162\164\151\154\150\141", "\75\75", "\41\75", "\76", "\76\75", "\74", "\74\75", "\46\46", "\174\174", 
"\41", null, null, null, null, null, null, null, "\50", "\51", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   20, 21, 22, 15, 16, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public DungeonCompiladorTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public DungeonCompiladorTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 24; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x67fffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[24];
    private final int[] jjstateSet = new int[2 * 24];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
