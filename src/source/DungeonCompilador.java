/* DungeonCompilador.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. DungeonCompilador.java */
package source;
import recovery.*;

import java.io.*;

public class DungeonCompilador/*@bgen(jjtree)*/implements DungeonCompiladorTreeConstants, DungeonCompiladorConstants {/*@bgen(jjtree)*/
  protected JJTDungeonCompiladorState jjtree = new JJTDungeonCompiladorState();
  public static void main(String[] args) {
    if (args.length == 0) {
      System.err.println("Erro: O Mestre precisa de um pergaminho para narrar!");
      System.err.println("Uso: java source.DungeonCompilador <nome_do_arquivo>");
      return;
    }

    System.out.println("O Mestre se prepara para narrar a aventura...");
    String nomeDoArquivo = args[0];

    try {
      FileInputStream fis = new FileInputStream(nomeDoArquivo);
      DungeonCompilador parser = new DungeonCompilador(fis);
      SimpleNode root = parser.programa();

      System.out.println("\nA campanha foi compilada com sucesso!");
      System.out.println("--- Visualizacao da Arvore Sintatica (AST) ---");
      root.dump(" ");

    } catch (FileNotFoundException e) {
        System.err.println("Erro: O Mestre nao encontrou o pergaminho da campanha: " + nomeDoArquivo);
    } catch (ParseException e) {
      System.err.println("A aventura termina abruptamente por um erro fatal: " + e.getMessage());
    } catch (TokenMgrError e){
        System.err.println("Voce tomou dano lexico! Um simbolo arcano nao foi reconhecido: " + e.getMessage());
    }
  }

  /**
  * Pula tokens até encontrar um da RecoverySet ou EOF.
  */
  private void skip(RecoverySet rs) {
      Token t = getToken(1);                       // olha o próximo
      while (!rs.contains(t.kind) && t.kind != DungeonCompiladorConstants.EOF) {
        getNextToken();                          // descarta
        t = getToken(1);
      }
  }

/* ================================================================== */
/* SINTAXE (Gramática com correções na árvore)                        */
/* ================================================================== */
  final public 
SimpleNode programa() throws ParseException {/*@bgen(jjtree) #Programa( 1) */
  ASTPrograma jjtn000 = new ASTPrograma(JJTPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INICIAPROG);
      jj_consume_token(IDENT);
      jj_consume_token(ABREBLOCO);
      bloco();
      jj_consume_token(FECHABLOCO);
      jj_consume_token(FIMINST);
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000,  1);
    jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  1);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public void bloco() throws ParseException {/*@bgen(jjtree) Bloco */
  ASTBloco jjtn000 = new ASTBloco(JJTBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case WHILE:
        case DO:
        case TIPOINT:
        case TIPOFLOAT:
        case TIPOBOL:
        case TIPOCHAR:
        case IDENT:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        try {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TIPOINT:
          case TIPOFLOAT:
          case TIPOBOL:
          case TIPOCHAR:{
            declaracao();
            break;
            }
          case IF:
          case WHILE:
          case DO:
          case IDENT:{
            comando();
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
      skip(Follow.bloco);
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void declaracao() throws ParseException {/*@bgen(jjtree) Declaracao */
  ASTDeclaracao jjtn000 = new ASTDeclaracao(JJTDECLARACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        tipo();
        id();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASSIGN:{
          jj_consume_token(ASSIGN);
          expressao();
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        jj_consume_token(FIMINST);
      } catch (ParseException e) {
System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.declaracao);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void tipo() throws ParseException {/*@bgen(jjtree) Tipo */
  ASTTipo jjtn000 = new ASTTipo(JJTTIPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TIPOINT:{
          jj_consume_token(TIPOINT);
          break;
          }
        case TIPOFLOAT:{
          jj_consume_token(TIPOFLOAT);
          break;
          }
        case TIPOBOL:{
          jj_consume_token(TIPOBOL);
          break;
          }
        case TIPOCHAR:{
          jj_consume_token(TIPOCHAR);
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.tipo);
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void comando() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENT:{
        atribuicao();
        break;
        }
      case IF:{
        condicional();
        break;
        }
      case WHILE:{
        lacoWhile();
        break;
        }
      case DO:{
        lacoDoUntil();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.comando);
    }
}

  final public void atribuicao() throws ParseException {/*@bgen(jjtree) Atribuicao */
  ASTAtribuicao jjtn000 = new ASTAtribuicao(JJTATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        id();
        jj_consume_token(ASSIGN);
        expressao();
        jj_consume_token(FIMINST);
      } catch (ParseException e) {
System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.atribuicao);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void condicional() throws ParseException {/*@bgen(jjtree) Condicional */
  ASTCondicional jjtn000 = new ASTCondicional(JJTCONDICIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jj_consume_token(IF);
        expressao();
        jj_consume_token(THEN);
        bloco();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELSE:{
          jj_consume_token(ELSE);
          bloco();
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        jj_consume_token(END);
      } catch (ParseException e) {
System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.condicional);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void lacoWhile() throws ParseException {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jj_consume_token(WHILE);
        expressao();
        jj_consume_token(DO);
        bloco();
        jj_consume_token(END);
      } catch (ParseException e) {
System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.lacoWhile);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void lacoDoUntil() throws ParseException {/*@bgen(jjtree) DoUntil */
  ASTDoUntil jjtn000 = new ASTDoUntil(JJTDOUNTIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jj_consume_token(DO);
        bloco();
        jj_consume_token(UNTIL);
        expressao();
        jj_consume_token(FIMINST);
      } catch (ParseException e) {
System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.lacoDoUntil);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

/* --- Expressões --- */
  final public 
void expressao() throws ParseException {/*@bgen(jjtree) Or */
  ASTOr jjtn000 = new ASTOr(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        expAND();
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ORBOOL:{
            ;
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            break label_2;
          }
          jj_consume_token(ORBOOL);
          expAND();
        }
      } catch (ParseException e) {
System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.expressao);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void expAND() throws ParseException {/*@bgen(jjtree) And */
  ASTAnd jjtn000 = new ASTAnd(JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        expRel();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ANDBOOL:{
            ;
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            break label_3;
          }
          jj_consume_token(ANDBOOL);
          expRel();
        }
      } catch (ParseException e) {
System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.expAND);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void expRel() throws ParseException {/*@bgen(jjtree) Rel */
  ASTRel jjtn000 = new ASTRel(JJTREL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        expAditiva();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:
        case NE:
        case GT:
        case GE:
        case LT:
        case LE:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case EQ:{
            jj_consume_token(EQ);
            break;
            }
          case NE:{
            jj_consume_token(NE);
            break;
            }
          case GT:{
            jj_consume_token(GT);
            break;
            }
          case GE:{
            jj_consume_token(GE);
            break;
            }
          case LT:{
            jj_consume_token(LT);
            break;
            }
          case LE:{
            jj_consume_token(LE);
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          expAditiva();
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          ;
        }
      } catch (ParseException e) {
System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.expRel);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void expAditiva() throws ParseException {/*@bgen(jjtree) Add */
  ASTAdd jjtn000 = new ASTAdd(JJTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        expMult();
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PLUS:
          case MINUS:{
            ;
            break;
            }
          default:
            jj_la1[10] = jj_gen;
            break label_4;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PLUS:{
            jj_consume_token(PLUS);
            break;
            }
          case MINUS:{
            jj_consume_token(MINUS);
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          expMult();
        }
      } catch (ParseException e) {
System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.expAditiva);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void expMult() throws ParseException {/*@bgen(jjtree) Mult */
  ASTMult jjtn000 = new ASTMult(JJTMULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        fator();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TIMES:
          case DIV:{
            ;
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            break label_5;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TIMES:{
            jj_consume_token(TIMES);
            break;
            }
          case DIV:{
            jj_consume_token(DIV);
            break;
            }
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          fator();
        }
      } catch (ParseException e) {
System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.expMult);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void fator() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENT:{
        id();
        break;
        }
      case INT_LIT:
      case FLOAT_LIT:
      case BOOL_LIT:
      case CHAR_LIT:{
        literal();
        break;
        }
      case NOTBOOL:{
        jj_consume_token(NOTBOOL);
ASTNot jjtn001 = new ASTNot(JJTNOT);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
          fator();
        } catch (Throwable jjte001) {
if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
        }
        break;
        }
      case 41:{
        jj_consume_token(41);
        expressao();
        jj_consume_token(42);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
System.err.println(">> Voce se atrapalha na acao! (Erro: " + e.getMessage() + ")");
    skip(Follow.fator);
    }
}

  final public void id() throws ParseException {/*@bgen(jjtree) Id */
  ASTId jjtn000 = new ASTId(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENT);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT_LIT:{
ASTIntLiteral jjtn001 = new ASTIntLiteral(JJTINTLITERAL);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(INT_LIT);
      } finally {
if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
      break;
      }
    case FLOAT_LIT:{
ASTFloatLiteral jjtn002 = new ASTFloatLiteral(JJTFLOATLITERAL);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(FLOAT_LIT);
      } finally {
if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
      }
      break;
      }
    case BOOL_LIT:{
ASTBoolLiteral jjtn003 = new ASTBoolLiteral(JJTBOOLLITERAL);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(BOOL_LIT);
      } finally {
if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
        }
      }
      break;
      }
    case CHAR_LIT:{
ASTCharLiteral jjtn004 = new ASTCharLiteral(JJTCHARLITERAL);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(CHAR_LIT);
      } finally {
if (jjtc004) {
          jjtree.closeNodeScope(jjtn004, true);
        }
      }
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  /** Generated Token Manager. */
  public DungeonCompiladorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xf6200,0xf6200,0x100000,0xf0000,0x6200,0x800,0x0,0x80000000,0x7e000000,0x7e000000,0x600000,0x600000,0x1800000,0x1800000,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x40,0x40,0x0,0x0,0x40,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x27e,0x3c,};
	}

  /** Constructor with InputStream. */
  public DungeonCompilador(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DungeonCompilador(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new DungeonCompiladorTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public DungeonCompilador(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new DungeonCompiladorTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new DungeonCompiladorTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public DungeonCompilador(DungeonCompiladorTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(DungeonCompiladorTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[43];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 16; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 43; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
